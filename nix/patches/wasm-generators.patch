diff --git a/clar2wasm/src/wasm_generator.rs b/clar2wasm/src/wasm_generator.rs
index 17e2267..2756456 100644
--- a/clar2wasm/src/wasm_generator.rs
+++ b/clar2wasm/src/wasm_generator.rs
@@ -304,7 +304,11 @@ impl Deref for BorrowedLocal {
 
 impl WasmGenerator {
     pub fn new(contract_analysis: ContractAnalysis) -> Result<WasmGenerator, GeneratorError> {
-        let standard_lib_wasm: &[u8] = include_bytes!("standard/standard.wasm");
+        let wasm_path = std::env::var("STANDARD_WASM_PATH")
+            .unwrap_or_else(|_| format!("{}/src/standard/standard.wasm", env!("CARGO_MANIFEST_DIR")));
+
+        let standard_lib_wasm: Vec<u8> = std::fs::read(&wasm_path)
+            .map_err(|e| GeneratorError::IOError(format!("Failed to read standard library WASM: {}", e)))?;
 
         let module = Module::from_buffer(standard_lib_wasm).map_err(|_err| {
             GeneratorError::InternalError("failed to load standard library".to_owned())
@@ -2289,9 +2293,9 @@ mod tests {
 
     #[test]
     fn end_of_standard_data_is_correct() {
-        const STANDARD_LIB_PATH: &str =
-            concat!(env!("CARGO_MANIFEST_DIR"), "/src/standard/standard.wasm");
-        let standard_lib_wasm = std::fs::read(STANDARD_LIB_PATH).expect("Failed to read WASM file");
+        let standard_lib_path = std::env::var("STANDARD_WASM_PATH")
+            .unwrap_or_else(|_| format!("{}/src/standard/standard.wasm", env!("CARGO_MANIFEST_DIR")));
+        let standard_lib_wasm = std::fs::read(&standard_lib_path).expect("Failed to read WASM file");
         let module = Module::from_buffer(&standard_lib_wasm).unwrap();
         let initial_data_size: usize = module.data.iter().map(|d| d.value.len()).sum();
 
